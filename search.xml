<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Vision Solution Principles]]></title>
      <url>%2F2016%2F11%2F22%2FVision%20Solution%2F</url>
      <content type="text"><![CDATA[Vision Solution PrinciplesChoosing and implementing machine vision technology involves the following questions: Is vision needed to do the job? Is there a financial incentive for investing in machine vision? Is the application solvable with vision? Which vision technology should be used? What does a typical vision project look like? What problems might be encountered along the way? Standard SensorsVision is a powerful and interesting technology, but far from alwaysthe best solution. It is important to keep in mind the vast possibilities with standard sensors and also the option of combining cameras with standard sensors. A simple solution that works is a preferable solution. Vision QualifierWhen assessing the suitability of an application to be solved by machine vision, there arecertain economic and technical key issues to consider. Investment IncentiveVision systems are seldom off-the-shelf products ready for plug-and-play installation, more often they should be considered as project investments. The reason is that vision solutions almost always involve some level of programming and experimenting before the application is robust and operational.The first step is thus to determine if there is a financial incentive or justification for aninvestment. There are four main incentives for this investment: Reduced cost of labor: Manual labor is often more costly than vision systems. Increase in production yield: The percentage of the produced products that arejudged as good-enough to be sold. Improved and more even product quality: The actual quality of the sold productsthrough more accurate inspections. Even a skilled inspector can get tired and letthrough a defect product after some hours of work. Increase in production speed: The output can be increased wherever manual in-spections are a bottleneck in the production.The price of the vision system should be put in perspective of the investment incentive, i.e.the combined effect of reduced labor and increase in yield, quality, and production speed.A rule of thumb is that the total cost of low-volume applications are approximately twicethe hardware price, including the cost of integration.Once the financial incentive is defined, a feasibility study can be considered. Application SolvabilityImage quality Having good contrast conditions and high-enough resolution is essential. A poor or variableimage quality can sometimes be compensated for by the use of algorithms, but developingthem is costly and robustness is an issue. In general, it is worthwhile to strive towards thebest-possible image quality before going on to the image processing. A key factor in building a robust vision application is to obtain good repeatability of objectrepresentation regarding: Illumination Object location and rotation There are methods to deal with variations in these factors, but in general less variabilitygives a more robust application. The optimal situation is a shrouded inspection stationwith constant illumination where the object has a fixed position and rotation relative to thecamera. Image Processing Algorithms Having a good image addresses the first half of the solution. The next step is to applyimage processing algorithms or tools to do the actual analysis. Some vision systems aredelivered with a ready-to-use software or toolbox, whereas others need third-party algo-rithms or even custom development of algorithms. This can have a heavy impact on theproject budget. Vision Project PartsOnce the application has qualified as a viable vision project, the phases that follow are:Feasibility study, investment, implementation, and acceptance testing. Feasibility StudyThe purpose of a feasibility study is to determine if the problem canbe solved with vision or not. In the feasibility report, there is information about the application, what parts have been solved and how, and which problems and challenges can be expected if the applicationbecomes a project.The feasibility study should either reach proof-of-concept (meaning “Yes, we can solve theapplication”), identify why the application is not solvable, or state which further informationis needed before proof-of-concept can be reached. InvestmentOnce the feasibility study is complete, it’s time for the investment decision and the project definition. The project definition should contain a full description of what the vision system shall do and how it will perform. A procedure for acceptance testing should be included. ImplementationThe implementation is the practical work of building the system. The contents and extent of the implementation phase may vary from a partial to a complete solution. Implementation is often called integration. When a company provides integration services, they are referred to as a system integrator. When vision is the integrator’s main business area, they are referred to as a vision integrator. Commissioning and Acceptance TestingOnce the implementation phase is completed, it is time for commissioning of the system, or handing it over to the customer. A part of the commissioning is an acceptance test according to the proceduredescribed in the project definition. The acceptance test description contains clear conditions of customer expectations of thesystem. If the test is passed, the system is considered to be completed or delivered. Application Solving MethodThe general method for solving a vision application consists of the following steps: Defining the task, choosing hardware, choosing image processing tools, defining a result output, and testing the application. Some iteration is usually needed before a final solution is reached. Defining the TaskDefining the task is essentially to describe exactly what the vision system shall do, whichperformance is expected, and under which circumstances. It is instrumental to have samples and knowledge about the industrial site where thesystem will be located. The collection of samples needs to be representative for the fullobject variation, for example including good, bad, and limit cases. In defining the task, it is important to decide how the inspected features can be param-eterized to reach the desired final result. Choosing HardwareThe steps for selecting system hardware are: The type of object and inspection determine the choice of camera technology. The object size and positioning requirements determine the FOV. The smallest feature to be detected and the FOV size determine the resolution. The FOV and the object distance determine the lens’ focal length (See the Ap-pendix for explanations and example calculations of needed focal length.) The type of inspections and the object’s environment determine the choice oflighting. The type of result to be delivered (digital I/O, Ethernet, etc) determines the choiceof cables and other accessories. The choice of camera and lighting determines the mounting mechanics.The above list is just a rough outline. Arriving at a well-defined solution requires practicalexperience and hands-on testing.When standard hardware is not sufficient for the task, a customization might be needed. Choosing Image Processing ToolsIn choosing the processing tools for a certain application, there are often a number ofpossibilities and combinations. How to choose the right one? This requires practical experience and knowledge about the available tools for the camera system at hand. Defining a Result OutputThe next step is to define how to communicate the result, for example to a PLC, a data-base, or a sorting machine. The most common output in machine vision is pass/fail. Testing the ApplicationThe application is not finished until it has been tested, debugged, and pushed to its limits.This means that the system function must be tested for normal cases as well as a numberof less frequent but possible cases, for example: Ambient light fluctuations, reflections, sunshine through a window, etc. Close to the acceptance limit for good and bad. The extremes of accepted object movement in the FOV. ChallengesDuring the feasibility study and implementation of a vision application there are some challengesthat are more common than others. This section treats typical bottlenecks and pitfallsin vision projects. Defining RequirementsIt can be a challenge to define the task so that all involved parties have the same expectations of system performance. The customer has the perspective and terminology of his or her industry, and so does the vision supplier. Communication between both parties may require that each share their knowledge. To formalize clear acceptance test conditions is a good way of communicating the expectations of the system. PerformanceThe cycle time can become a critical factor in the choice of camera system and algorithmswhen objects are inspected at a high frequency. This situation is typical for the packagingand pharmaceutical industries. Accuracy is the repeatability of measurements as compared to a reference value orposition (measure applications). Success rate is the system’s reliability in terms of false OKs and false rejects (inspectand identify applications). A false OK is when a faulty object is wrongly classified as OK,and a false reject is when an OK object is wrongly classified as false. It is often importantto distinguish between the two aspects, since the consequences of each can be totallydifferent in the production line. System FlexibilityBuilding a vision system that performs one task in a constant environment can be easy.However, the system’s complexity can increase significantly when it shall inspect variableobjects in a variable environment. Worth keeping in mind is that objects that are very similar in the mind of their producercan be totally different from a vision perspective. It is common to expect that since thevision system inspects object A with such success, it must also be able to inspect objectsB and C with the same setup since they are “so similar”. Object Presentation RepeatabilityThe object presentation is the object’s appearance in the image, including position,rotation, and illumination. With high repeatability in the image, the application solving canbe easy. On the other hand, the application solving may become difficult or even impossi-ble for the very same object if its presentation is arbitrary. For example, rotation invariance (360 degree rotation tolerance) in a 2D application ismore demanding on the processing than a non-rotating object. In 3D, rotation invariancemight not even be possible for some objects because of occluded features. Mechanics and EnvironmentAlthough a vision system can be a technically optimal solution, sometimes there is notenough mounting space. Then one must consider an alternative solution or redesign ofthe machine. Some industries have environments with heat, vibrations, dust, and humidity concerns.Such conditions can have undesirable side-effects: Reduced hardware performance, life,and deteriorated image quality (blur). Information about the hardware’s ability to withstandsuch conditions is found in its technical specifications.]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Halloween 2016]]></title>
      <url>%2F2016%2F11%2F04%2FHalloween%2F</url>
      <content type="text"><![CDATA[Happy Halloween 2016]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[21世紀的健康飲食]]></title>
      <url>%2F2016%2F11%2F04%2Fhealth%2F</url>
      <content type="text"><![CDATA[魚類魚是人體必需的Omega-3脂肪酸重要來源，能保護心臟健康，讓血液保持流動，更有助於腦部、眼睛及降低發炎反應。高發炎反應是許多慢性疾病的特點，例如關節炎、心臟疾病及阿茲海默症等，因此控制發炎可能是年老仍保健康的重要關鍵。 味噌由黃豆發酵製成的味噌，富含對女性有益處的異黃酮（Isoflavone），可幫助停經後的女性降低乳癌及子宫内膜癌風險。 昆布昆布俗稱海帶，富含礦物質碘、鋅、鎂、鈣、鉀等，以及人體免疫系統、抗氧化和心臟健康所需等數十種礦物質。 抹茶抹茶富含兒茶素（Catechin），是對身體有益的抗氧化物質，可能有助於抵抗退化症狀，例如阿茲海默症、心臟疾病甚至癌症。此外，抹茶具有高量茶氨酸（L-Theanine），有助放鬆心神、減緩壓力。 醬菜傳統發酵的醬菜，是天然益生菌的重要來源，可促進人體消化與吸收系統。但巴恩斯也提醒，部分店家販售的可能不是傳統發酵醬菜，只是加了醋和鹽巴，多經殺菌處理過以利長期保存，多吃無益。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Introduction to openFrameworks on vision and automation world.]]></title>
      <url>%2F2016%2F11%2F03%2FOpenFrameworks%2F</url>
      <content type="text"><![CDATA[As an AOI and automation engineer, I often deal with OpenGL, OpenCV and other C + + library. These libraries having different rules and usage; in addition, the preparation of the interface is also a routine work in order to make an own programs with more interactive capabilities. However, with the increase of engineering complexity, the management and maintenance of the library becomes more and more difficult. On other hand, the addition and deletion of the library will not only increase the learning cost, but also affect the logical layer of the entire system. so, if you want to make your project easy to maintain, it is necessary to use the design pattern as much as possible, so that the separation of logic and interface will more easy to maintain. But for scientific research, blindly into the shackles of design patterns will lead to premature optimization of the problem, affecting the progress of scientific research. Until then, I came accross with openFrameworks. What is openFrameworksopenFrameworks is an open source C++ toolkit designed to assist the creative process by providing a simple and intuitive framework for experimentation. openFrameworks is designed to work as a general purpose glue, and wraps together several commonly used libraries, including: OpenGL, GLEW, GLUT, libtess2 and cairo for graphics rtAudio, PortAudio, OpenAL and Kiss FFT or FMOD for audio input, output and analysis FreeType for fonts FreeImage for image saving and loading Quicktime, GStreamer and videoInput for video playback and grabbing Poco for a variety of utilities OpenCV for computer vision Assimp for 3D model loading While these libraries follow different rules and usage, oF provides a common interface on top of them, making it easy to use them. In addition, oF Another bright spot is that it has a good cross-platform features. At present, it supports five operating systems (Windows, OSX, Linux, iOS, Android) and four integrated development environment (XCode, qt creator, Visual Studio, Eclipse). Install and configure openFrameworksThe following describes how to install and configure oF under Linux. Download openFrameworksVisit oF’s official download page and find the version that applies to your operating system and IDE. Click Download. For example, my computer is a Linux Ubuntu 64-bit system and qt creator is my IDE, so I chose Linux 64bit, and the setup guide of qt creator. Install DependenciesDownload is complete, extract it, open the terminal, cd to extract the directory, for example: 1$ /home/thyeun/OF After that, depending on your Linux distribution, cd into scripts / linux / &lt;operating system release name&gt;, for example: 1$ cd scripts/linux/ubuntu Execute two commands for install openFrameworks dependencies (requires root privileges): 12$ sudo ./install_dependencies.sh$ sudo ./install_codecs.sh Compiler oFAfter installing dependencies, return to the previous directory: 1$ cd .. Execute compiler oF: 1$ ./compileOF.sh Compile the project builderIn order to facilitate the creation of future projects, oF also provides a project generator projectGenerator. It is also required to compile before using it. Go back to the directory where the compileOF.sh script is located and type the following command: 1$ ./compilePG.sh After the completion of installation of compilePG.sh, go back to the root directory of oF, and look for projectGenerator directory, which can be found inside the projectGenerator, we can implement it: 12$ cd ../../projectGenerator$ ./projectGenerator Click on the bottom left corner of the GENERATE button, it will specified the path to generate a project path, as shown above picture is / home / thyeun / OF / apps / myApps / mySketch: 123$ /home/thyeun/OF/apps/myApps/mySketch$ lsaddons.make bin config.make Makefile mySketch.qbs mySketch.qbs.user src among them: Addons.make file - a list of plug-ins that are used to maintain this project; Config.make file - used to add a search path, modify the optimization tag, and other settings; Makefile - Makefile of the project, generally do not need to directly modify it. In oF, The goals of make include: Debug: Generates an executable program with debugging flags; Release: generates compiler-optimized executables; Clean: clear target files and executable programs; CleanDebug: only clear the debug target of the generated results; CleanRelease: only release the release target of the generated results; Help: print help information; Run: Executes the generated executable. MySketch.qbs and mySketch.qbs.user file - qt creator project files. Template installation for qt CreatorAfter finish the installation of dependencies and compiler, than cd to scripts / qtcreator, for install qt creator template. 1$ cd scripts/qtcreator Execute the commands for the template installation for qt creator 1$ sudo ./install_template.sh]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2016%2F11%2F03%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
